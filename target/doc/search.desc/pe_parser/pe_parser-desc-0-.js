searchState.loadedDescShard("pe_parser", 0, "Contains the error value\nCustom error type for Parsey.\nData in the buffer didn’t make sense.\nFailed to read a null-terminated DLL name.\nDOS header magic is wrong (expected <code>MZ</code> / 0x5A4D).\nPE signature didn’t match <code>PE\\0\\0</code> (0x00004550).\nBuffer was smaller than we expected.\nA table’s RVA/offset fell outside the file data.\nAn underlying I/O operation failed.\nContains the success value\nResult type for PE parser operations.\nOptional header magic wasn’t 0x10B (PE32) or 0x20B …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents a single entry in the PE export directory.\nRVA pointing to an array of exported function addresses.\nRVA pointing to an array of ordinals (one per name).\nRVA pointing to an array of function names.\nStarting ordinal number for exported functions.\nCharacteristics flags set for the export directory …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRVA of the null-terminated ASCII name of the DLL.\nTotal number of function entries.\nNumber of names associated with the exports.\nParses the export table from a PE file and returns a list …\nTimestamp indicating when the export data was created …\nUnified enum for optional header\nOptional Header for PE32+ (fields as u64 where appropriate)\nbase_of_data exists only in PE32\nData directories (shared between variants)\nConvert the raw <code>e_lfanew</code> field into a <code>usize</code> offset.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRead the DOS header (<code>IMAGE_DOS_HEADER</code>) from the start of …\nGrab the 20‑byte <strong>COFF FileHeader</strong> that lives right after …\nParse all section headers declared in the COFF FileHeader.\nOne entry in the PE import table.\nRVA of the import address table (first thunk for IAT).\nIndex of the forwarder chain.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRVA of the ASCII name of the imported DLL.\nRVA of the original import lookup table (first thunk).\nParse the import table from a PE file and return its …\nTime of first linking.\nLoaded PE file with its main headers and sections.\nEntire file contents.\nOffset to the NT header (e_lfanew).\nCOFF FileHeader.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOptionalHeader (32- or 64-bit).\nRead a PE file from <code>path</code>, parse headers and sections, and …\nWrap this file in a <code>Parsed</code> view for JSON output.\nReturn a reference to this <code>PeFile</code>.\nSection headers table.\nWrapper around a parsed PE file, exposing higher-level …\nContains a full view of PE file metadata in a structured, …\nDescribes a parsed section in a PE file with …\nA lightweight summary of a PE file with core identifying …\nIdentifies the PE machine architecture (e.g., x86, x64).\nExtracts the COFF FileHeader flags and their meanings.\nDetermines file type (EXE, DLL, etc.) based on file …\nReturns a list of DLL characteristic flags and their …\nReturns the program entry point address in hexadecimal.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the image base address as a hexadecimal string.\nReturns the declared image version string.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the linker version in <code>vX.Y</code> format.\nCreates a new parsed wrapper instance from a raw PE file …\nReturns the target OS version as a string.\nBuilds a detailed, pretty-printed representation of the PE …\nParses section headers and transforms them into …\nReturns the subsystem type as a readable string.\nReturns the declared subsystem version string.\nReturns a compact summary of key PE fields.\nConverts the PE timestamp to a formatted UTC datetime …")